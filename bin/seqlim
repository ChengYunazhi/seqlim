#!/usr/bin/env python

from seqlim import MSeq
import os
import sys
import errno


class Path:
    @staticmethod
    def mkdir_p(path):
        if path:
            try:
                os.makedirs(path)
            except OSError as exc:
                if exc.errno == errno.EEXIST and os.path.isdir(path):
                    pass
                else:
                    raise

    @staticmethod
    def listfiles_r(inpath, exts=[], depth_count=1):
        for filename in os.listdir(inpath):
            filepath = os.path.join(inpath, filename)
            if os.path.isdir(filepath):
                for f in Path.listfiles_r(
                    filepath, exts=exts, depth_count=depth_count+1
                ):
                    yield f
            elif os.path.isfile(filepath):
                if exts and not os.path.splitext(filepath)[1] in exts:
                    continue
                subpath = filename
                stem = os.path.split(filepath)[0]
                for c in range(depth_count-1):
                    stem, base = os.path.split(stem)
                    subpath = os.path.join(base, subpath)
                yield filepath, subpath


if __name__ == '__main__':
    import argparse
    par = argparse.ArgumentParser()
    par.add_argument(
        'a', metavar='cnvt|catv|cath', 
        choices=['cnvt', 'catv', 'cath'],
        help="choose among 'cnvt' (convert), 'catv' (concatenate vertically), 'cath' (concatenate horizontally))"
    )
    par.add_argument(
        'i', metavar='PATH',
        help='MSA file or dir containing MSA files.'
    )
    par.add_argument(
        '-o', metavar='PATH',
        help='file or dir for saving MSA(s).'
    )
    par.add_argument(
        '-infmt', metavar='fasta|phylip|msf', default='fasta',
        help="input format. default=fasta"
    )
    par.add_argument(
        '-outfmt', metavar='fasta|phylip|nex|msf|tsv|csv', default='fasta',
        help="output format. default=fasta"
    )
    par.add_argument(
        '-line_length', metavar='INTEGER', type=int, default=60,
        help="sequence length of each line. default=60"
    )
    par.add_argument(
        '-block_length', metavar='INTEGER', type=int, default=10,
        help="the length of each block in lines. default=10"
    )
    par.add_argument(
        '-remove', metavar="S1",
        help="the specified residue will be removed."
    )
    par.add_argument(
        '--read_gzipped', action="store_true",
        help="read gzipped file(s)."
    )
    par.add_argument('-inexts', metavar='inexts', nargs='+')
    args = par.parse_args()

    read_mode = "r"
    if args.read_gzipped:
        import gzip
        open_func = gzip.open
        if sys.version_info >= (3,):
            read_mode = "rt"
    else:
        open_func = open

    if args.a == 'cnvt': # convert
        if os.path.isdir(args.i):
            # if args.i is a dir, converts files in args.i iteratively.
            if not args.o:
                sys.stderr.write("a dir path for output files is needed.\n")
                exit()
            Path.mkdir_p(args.o)
            for f, subf in Path.listfiles_r(args.i, exts=args.inexts):
                stem, filename = os.path.split(subf)
                basename, ext = os.path.splitext(filename)
                outdir = os.path.join(args.o, stem)
                outfilename = os.path.join(outdir, basename+'.'+args.outfmt)
                Path.mkdir_p(outdir)
                
                with open_func(f, read_mode) as ifh:
                    with open(outfilename, "w") as ofh:
                        mseq = MSeq.parse(ifh, infmt=args.infmt)
                        if args.remove:
                            mseq.rm(args.remove)
                        mseq.write(
                            ofh, args.outfmt, args.block_length, args.line_length,
                            quiet=False
                        )

        else:
            # if args.i is a file, converts the file.
            with open_func(args.i, read_mode) as ifh:
                mseq = MSeq.parse(ifh, infmt=args.infmt)
                if args.remove:
                    mseq.rm(args.remove)
                if args.o:
                    with open(args.o, "w") as ofh:
                        mseq.write(
                            ofh, args.outfmt, args.block_length, args.line_length,
                            quiet=False
                        )
                else:
                    mseq.write(
                        sys.stdout, args.outfmt, args.block_length, args.line_length,
                        quiet=True
                    )

    elif args.a == 'catv' and os.path.isdir(args.i):
        # make a blank MSeq object.
        mseq = MSeq()
        
        # make MSeq objects for files, and extend their Seq objects to the new MSeq object.
        for filename, _ in Path.listfiles_r(args.i, exts=args.inexts):
            with open_func(filename, read_mode) as f:
                mseq.extend(MSeq.parse(f, infmt=args.infmt))
        
        if args.remove:
            mseq.rm(args.remove)

        if args.o:
            with open(args.o, "w") as ofh:
                mseq.write(
                    ofh, args.outfmt, args.block_length, args.line_length,
                    quiet=False
                )
        else:
            mseq.write(
                sys.stdout, args.outfmt, args.block_length, args.line_length,
                quiet=True
            )
        
    elif args.a == 'cath' and os.path.isdir(args.i):
        # make MSeq objects for individual files.
        mseqobs = []
        seq_num = None
        for filename, _ in Path.listfiles_r(args.i, exts=args.inexts):
            with open_func(filename, read_mode) as f:
                _mseqob = MSeq.parse(f, infmt=args.infmt)
                current_seq_num = len(_mseqob)
                if seq_num is not None and current_seq_num != seq_num:
                    sys.stderr.write('Mismatch in sequence # among files.\n')
                    sys.exit(0)
                else:
                    seq_num = current_seq_num
                mseqobs.append(_mseqob)

        # make a blank MSeq object.
        mseq = MSeq()

        # iterate over Seq objects in each MSeq object to concatenate seqs.
        for i in range(seq_num):
            seq = ''
            for ob in mseqobs:
                seq += ob[i].seq
            mseq.add(mseqobs[0][i].tag, seq)

        if args.remove:
            mseq.rm(args.remove)

        if args.o:
            with open(args.o, "w") as ofh:
                mseq.write(
                    ofh, args.outfmt, args.block_length, args.line_length,
                    quiet=False
                )
        else:
            mseq.write(
                sys.stdout, args.outfmt, args.block_length, args.line_length,
                quiet=True
            )
        
